import plico_dm
dm = plico_dm.deformableMirror('193.206.155.78', 7000)
import plico_interferometer
interf = plico_interferometer.interferometer('193.206.155.78', 7300)


### test command history matrix ###
from LibSpecchi.type.commandHistory import CmdHistory
ch = CmdHistory(10)
self = ch
amp_vector = np.zeros(10)+7
mat = np.zeros((10,10))
for i in range(10): 
     mat[i,i]=1 
cmd_matrix = mat
n_rep = 1
mode_vector = np.arange(10)
template = None
###############



class DMtest():
    def __init__(self):
        pass
    def get_number_of_actuators(self):
        acts = 10
        return acts
    def set_shape(self, cmd):
    	pass

class InterfTest():
    def __init__(self): 
        pass 
    def wavefront(self, n_images=1):
        from astropy.io import fits as pyfits
        aa = '/Users/rm/Desktop/Arcetri/M4/Data/M4Data/OPTData/IFFunctions/20211212_163439/image_0043.fits'
        hduList = pyfits.open(aa) 
        data = hduList[0].data
        mask = hduList[1].data
        masked_ima = np.ma.masked_array(data, mask= mask)
        return masked_ima

#conf = '/Users/rm/eclipse-workspace/M4/m4/configuration/myConfig.yaml'
#from m4.configuration import start
#ott, interf = start.create_ott(conf)
from LibSpecchi.influenceFunctionsMaker import IFMaker
dm = DMtest()
interf = InterfTest()
iff = IFMaker(interf, dm)


#pezzetto matrice di comandi#
cmd_matrix = iff._cmdMatrix #iff.getHadamardMatrix()
amplitude = np.arange(10)
iff._actsVector = np.arange(iff._nActs)
template = np.array([1, -1, 1])
n_rep = 1

from LibSpecchi.type.commandHistory import CmdHistory
cmdH = CmdHistory(iff._nActs)

command_history_matrix_to_apply, iff._tt_cmdH = \
                    cmdH.shuffleCommandHistoryMaker(iff._actsVector,
                                                    amplitude,
                                                    cmd_matrix,
                                                    n_push_pull,
                                                    template)

#acquisizione ed analisi#
modalBaseTag = 'Hadarmard10'
ampTag = 'ampTest10'

tt = iff.acquisitionAndAnalysis(1, modalBaseTag, ampTag, shuffle=False, template=None)


#converter#
from LibSpecchi.convertWFToDmCommand import Converter
tt = '20211210_111951'
cc = Converter(tt)


## test linearit√† ##
cmd_tag = 'linmat' nota: ho crato la matrice 10x10 con 1 sugli attuatori 3, 7, 9
dm = DMtest()
interf = InterfTest()

from LibSpecchi.characterisation.measurements import MeasurementAcquisition 
meas = MeasurementAcquisition(dm, interf, '20220614_154718')
tn = meas.linearity('linmat', np.array([0.1, 0.2]))

#test per coordinate#
ima = np.random.random((512, 512))
from skimage.draw import circle as draw_circle
circle = np.ones((512,512))
rr, cc = draw_circle(250, 250, 100) 
circle[rr, cc] = 0
masked_ima = np.ma.masked_array(ima, mask=circle)

size = np.array([masked_ima.shape[0], masked_ima.shape[1]])
ima_x = np.arange(size[0], dtype = float)
ima_y = np.arange(size[1], dtype = float)

centro = [250,250]
raggio = 100
xx = (np.tile(ima_x, (size[0], 1))-centro[0]) / raggio
yy = (np.tile(ima_y, (size[1], 1)).T-centro[1]) / raggio
