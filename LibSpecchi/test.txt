class DMtest():
    def __init__(self):
        pass
    def getNActs(self):
        acts = 10
        return acts
    def setActsCommand(self, cmd):
    	pass
from LibSpecchi.influenceFunctionsMaker import IFMaker
conf = '/Users/rm/eclipse-workspace/M4/m4/configuration/myConfig.yaml'
from m4.configuration import start
ott, interf = start.create_ott(conf)
dm = DMtest()
iff = IFMaker(dm, interf)


#pezzetto matrice di comandi#
cmd_matrix = iff._cmdMatrix #iff.getHadamardMatrix()
amplitude = np.arange(10)
iff._actsVector = np.arange(iff._nActs)
template = np.array([1, -1, 1])
n_push_pull = 1

from LibSpecchi.type.commandHistory import CmdHistory
cmdH = CmdHistory(iff._nActs)

command_history_matrix_to_apply, iff._tt_cmdH = \
                    cmdH.shuffleCommandHistoryMaker(iff._actsVector,
                                                    amplitude,
                                                    cmd_matrix,
                                                    n_push_pull,
                                                    template)

#acquisizione ed analisi#
modalBaseTag = 'Hadarmard10.fits'
ampTag = 'ampTest10.fits'

tt = iff.acquisitionAndAnalysis(1, modalBaseTag, ampTag, shuffle=False, template=None)


#converter#
tt = '20211210_111951'
from LibSpecchi.influenceFunctionsMaker import IFMaker
an = IFMaker.loadAnalyzerFromIFMaker(tt)